[
  {
    "path": "posts/2021-05-18-nearest-neighbors-classifier/",
    "title": "Nearest Neighbors Classifier",
    "description": "Birds of same feather flock together",
    "author": [
      {
        "name": "Vidyasagar Bhargava",
        "url": {}
      }
    ],
    "date": "2021-05-18",
    "categories": [],
    "contents": "\nIntroduction\nNearest neighbor classifiers are defined by their characteristic of classifying unlabeled examples by assigning them the class of similar labeled examples.\nNearest Neighbors works well for classification task where the relationships among the features and target classes are numerous and extremely difficult to understand but the items of similar class tend to be homogeneous.\nNearest Neighbor classifier struggles most when there is no clear distinction exists among the groups.\nk-NN algorithm\nk-Nearest Neighbor algorithm is an example of nearest neighbor classifier.\n     Strength\n        Weakness\nSimple and effective\nMakes no assumption about data\nFast Training Process\n\nDoesnâ€™t produce model, limiting the ability to understand how features are related to class\nRequires selection of k\nSlow classification phase\nCategorical features and missing data require pre processing\n\nThe k-Nearest Neighbor algorithm uses nearest k number of neighbors for labeling of an unlabeled example. The unlabeled test example is assigned the class of majority of the k-Nearest Neighbors.\nFor finding the distance k-NN algorithm uses Euclidean distance.\nChoosing an appropriate k\nChoosing the value of k determines how well the model will generalize to future data. Choosing a large k reduces the impact or variance caused by noisy data but can bias the learner so that it runs the risk of ignoring small, but important pattern.\nIn Practice choosing k depends on the difficulty of the concept to be learned and the number of records in training data.\nStart with k value equal to the square root of the number of training examples.\nUsing cross validation to determine the best k value.\nWeighted voting is one of interesting way to solve this problem. By giving higher weight to close neighbors.\nk-NN from scratch\nCompute distances between x and all examples in the training set\nSort by distance and return indexes of the first k neighbors\nExtract the labels of the k nearest neighbor training samples\nReturn the most common class label\n\nimport numpy as np\nfrom collections import Counter\n\n\ndef euclidean_distance(x1, x2):\n        return np.sqrt(np.sum((x1 - x2)**2))\n\nWe used euclidean distance for calculating the nearest neighbors.\nNow we will define our KNN Class\n\nclass KNN:\n    def __init__(self, k=3):\n      self.k = k\n\n    def fit(self, X, y):\n      self.X_train = X\n      self.y_train = y\n\n    def predict(self, X):\n      y_pred = [self._predict(x) for x in X]\n      return np.array(y_pred)\n\n    def _predict(self, x):\n        # Compute distances between x and all examples in the training set\n      distances = [euclidean_distance(x, x_train) for x_train in self.X_train]\n        # Sort by distance and return indexes of the first k neighbors\n      k_idx = np.argsort(distances)[:self.k]\n        # Extract the labels of the k nearest neighbor training samples\n      k_neighbor_labels = [self.y_train[i] for i in k_idx]  \n        # return the most common class label\n      most_common = Counter(k_neighbor_labels).most_common(1)\n      return most_common[0][0]\n\nWe are going to use iris dataset to test our KNN model that we created !!!\n\nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split\n\niris = datasets.load_iris()\n\nX, y = iris.data, iris.target\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1234)\n\n\nclf = KNN()\nclf.fit(X_train, y_train)\n\n\ndef accuracy(y_true, y_pred):\n    accuracy = np.sum(y_true == y_pred) / len(y_true)\n    return accuracy\n\n\npredictions = clf.predict(X_test)\nprint(\"custom KNN classification accuracy\", accuracy(y_test, predictions))\ncustom KNN classification accuracy 1.0\n\n\n\n\n",
    "preview": {},
    "last_modified": "2021-05-18T22:37:43+05:30",
    "input_file": {}
  },
  {
    "path": "posts/2021-03-17-lets-talk-about-probability-distribution/",
    "title": "Let's Talk about Probability Distribution",
    "description": "A short description of the post.",
    "author": [
      {
        "name": "Vidyasagar Bhargava",
        "url": "https://vidyasagar.rbind.io"
      }
    ],
    "date": "2021-03-17",
    "categories": [],
    "contents": "\nOk so you have already heard of term probability Distribution but it always confuses you then you are at right place.\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\ndata_url = 'https://raw.githubusercontent.com/chiphuyen/just-pandas-things/master/data/interviews.csv'\ndf = pd.read_csv(data_url)\ndf.head()\n  Company  ...                                             Review\n0   Apple  ...  Application  I applied through a staffing agen...\n1   Apple  ...  Application  I applied online. The process too...\n2   Apple  ...  Application  The process took 4 weeks. I inter...\n3   Apple  ...  Application  The process took a week. I interv...\n4   Apple  ...  Application  I applied through an employee ref...\n\n[5 rows x 10 columns]\n\n\ndf.groupby(['Company']).size().reset_index(name='interviews').sort_values(['interviews'], ascending=False).head(10)\n      Company  interviews\n2      Amazon        3469\n7      Google        3445\n6    Facebook        1817\n11  Microsoft        1790\n8         IBM         873\n4       Cisco         787\n14     Oracle         701\n25       Uber         445\n26       Yelp         404\n3       Apple         363\n\n\n\n\n",
    "preview": {},
    "last_modified": "2021-03-25T22:40:47+05:30",
    "input_file": {}
  },
  {
    "path": "posts/2021-03-15-fun-with-linear-regression/",
    "title": "Fun with Linear Regression",
    "description": "A short description of the post.",
    "author": [
      {
        "name": "Vidyasagar Bhargava",
        "url": "https://example.com/norajones"
      }
    ],
    "date": "2021-03-15",
    "categories": [],
    "contents": "\nLinear Regression :-\n1. How it works and Building from scratch?\n2. What are assumptions?\n3. How to interpret model output?\n4. How to evaluate model performance?\n5. Other topics\nHow it works?\nimporting key libraries\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimporting dataset\ndf = pd.read_csv(\"https://raw.githubusercontent.com/mohit-baliyan/References/master/salary_data.csv\")\ndf.head()\n   YearsExperience  Salary\n0              1.1   39343\n1              1.3   46205\n2              1.5   37731\n3              2.0   43525\n4              2.2   39891\n\n\nX = df.iloc[:,0]\nY = df.iloc[:,1]\nplt.scatter(X, Y)\nplt.show()\n\n\nbuilding class\n\nclass LinearHypothesis():\n    def __init__(self):\n        self.w = np.random.randn()\n        self.b = np.random.randn()\n    \n    def __call__(self, X):\n        pred = self.w*X + self.b\n        return pred\n        \n    def update_params(self,new_w, new_b):\n        self.new_w = w\n        self.new_b = b\n\nOutput\n\nH = LinearHypothesis()\ny_hat = H(X)\nprint('Input :', X, '\\n')\nInput : 0      1.1\n1      1.3\n2      1.5\n3      2.0\n4      2.2\n5      2.9\n6      3.0\n7      3.2\n8      3.2\n9      3.7\n10     3.9\n11     4.0\n12     4.0\n13     4.1\n14     4.5\n15     4.9\n16     5.1\n17     5.3\n18     5.9\n19     6.0\n20     6.8\n21     7.1\n22     7.9\n23     8.2\n24     8.7\n25     9.0\n26     9.5\n27     9.6\n28    10.3\n29    10.5\nName: YearsExperience, dtype: float64 \nprint('Weight :', H.w, 'B :', H.b, '\\n')\nWeight : 0.5662352546949777 B : -1.4489134978747804 \nprint('prediction :', y_hat, '\\n')\nprediction : 0    -0.826055\n1    -0.712808\n2    -0.599561\n3    -0.316443\n4    -0.203196\n5     0.193169\n6     0.249792\n7     0.363039\n8     0.363039\n9     0.646157\n10    0.759404\n11    0.816028\n12    0.816028\n13    0.872651\n14    1.099145\n15    1.325639\n16    1.438886\n17    1.552133\n18    1.891875\n19    1.948498\n20    2.401486\n21    2.571357\n22    3.024345\n23    3.194216\n24    3.477333\n25    3.647204\n26    3.930321\n27    3.986945\n28    4.383310\n29    4.496557\nName: YearsExperience, dtype: float64 \n\nGradient descent\n\n\n\n",
    "preview": "posts/2021-03-15-fun-with-linear-regression/fun-with-linear-regression_files/figure-html5/unnamed-chunk-3-1.png",
    "last_modified": "2021-03-15T15:04:30+05:30",
    "input_file": {}
  }
]
